// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
		"/product": {
			"post": {
			  "tags": [
				"Product"
			  ],
			  "summary": "create product",
			  "description": "",
			  "consumes": [
				"application/json"
			  ],
			  "parameters": [
				{
				  "in": "body",
				  "name": "body",
				  "description": "Detail about product to add",
				  "required": true,
				  "schema": {
					"type": "object",
					"properties": {
					  "product_id": {
						"type": "integer",
						"example": 9
					  },
					  "product_name": {
						"type": "string",
						"example": "Kit Kat"
					  },
					  "product_quantity": {
						"type": "integer",
						"example": 18
					  },
					  "product_price": {
						"type": "number",
						"example": 1.5
					  },
					  "product_product_type_id": {
						"type": "integer",
						"example": 1
					  }
					}
				  }
				}
			  ],
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Add product successfully"
					}
				  }
				},
				"400": {
				  "description": "Bad Request",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while binding to model."
					}
				  }
				},
				"500": {
				  "description": "Internal Server Error",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while adding product."
					}
				  }
				}
			  }
			},
			"get": {
			  "tags": [
				"Product"
			  ],
			  "summary": "read product by product_id",
			  "description": "",
			  "consumes": [
				"application/x-www-form-urlencoded"
			  ],
			  "parameters": [
				{
				  "in": "query",
				  "name": "product_id",
				  "description": "Product Id",
				  "default": 1,
				  "type": "integer",
				  "required": true
				}
			  ],
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "product_id": {
						"type": "integer"
					  },
					  "product_name": {
						"type": "string"
					  },
					  "product_quantity": {
						"type": "integer"
					  },
					  "product_price": {
						"type": "number"
					  }
					},
					"example": {
					  "product_id": "1,",
					  "product_name": "Apple,",
					  "product_quantity": "5,",
					  "product_price": 10.3
					}
				  }
				},
				"400": {
				  "description": "Bad Request",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Product_id needs to be an integer."
					}
				  }
				},
				"500": {
				  "description": "Internal Server Error",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while getting product."
					}
				  }
				}
			  }
			}
		  },
		  "/products": {
			"get": {
			  "tags": [
				"Product"
			  ],
			  "summary": "read all products",
			  "description": "",
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "product_id": {
						"type": "integer"
					  },
					  "product_name": {
						"type": "string"
					  },
					  "product_quantity": {
						"type": "integer"
					  },
					  "product_price": {
						"type": "number"
					  }
					},
					"example": [
					  {
						"product_id": 1,
						"product_name": "Apple",
						"product_quantity": 5,
						"product_price": 10.3
					  },
					  {
						"product_id": 2,
						"product_name": "Bread",
						"product_quantity": 23,
						"product_price": 3.6
					  },
					  {
						"product_id": 3,
						"product_name": "Lobster Roll",
						"product_quantity": 3,
						"product_price": 50.8
					  }
					]
				  }
				},
				"500": {
				  "description": "Internal Server Error",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while getting all products."
					}
				  }
				}
			  }
			}
		  },
		  "/update": {
			"put": {
			  "tags": [
				"Product"
			  ],
			  "summary": "update product by product_id",
			  "description": "",
			  "consumes": [
				"application/json"
			  ],
			  "parameters": [
				{
				  "in": "query",
				  "name": "product_id",
				  "description": "Product Id",
				  "default": 7,
				  "type": "integer",
				  "required": true
				},
				{
				  "in": "body",
				  "name": "body",
				  "description": "Detail about product to update",
				  "required": true,
				  "schema": {
					"type": "object",
					"properties": {
					  "product_quantity": {
						"type": "integer",
						"example": 2
					  },
					  "product_price": {
						"type": "number",
						"example": 30.5
					  }
					}
				  }
				}
			  ],
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Update product successfully."
					}
				  }
				},
				"400": {
				  "description": "Bad Request",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": [
					  {
						"message": "Product_id needs to be an integer."
					  },
					  {
						"message": "Error while binding to model."
					  }
					]
				  }
				},
				"404": {
				  "description": "Not Found",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "No product belong to this product_id."
					}
				  }
				},
				"500": {
				  "description": "Internal Server Error",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while updating product."
					}
				  }
				}
			  }
			}
		  },
		  "/delete": {
			"delete": {
			  "tags": [
				"Product"
			  ],
			  "summary": "delete product by product_id",
			  "description": "",
			  "consumes": [
				"application/x-www-form-urlencoded"
			  ],
			  "parameters": [
				{
				  "in": "query",
				  "name": "product_id",
				  "description": "Product Id",
				  "default": 8,
				  "type": "integer",
				  "required": true
				}
			  ],
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Delete product successfully."
					}
				  }
				},
				"400": {
				  "description": "Bad Request",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Product_id needs to be an integer."
					}
				  }
				},
				"404": {
				  "description": "Not Found",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "No product belong to this product_id."
					}
				  }
				},
				"500": {
				  "description": "Internal Server Error",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Error while deleting product."
					}
				  }
				}
			  }
			}
		  },
		  "/ping": {
			"get": {
			  "tags": [
				"Ping"
			  ],
			  "summary": "check status",
			  "responses": {
				"200": {
				  "description": "OK",
				  "schema": {
					"properties": {
					  "message": {
						"type": "string"
					  }
					},
					"example": {
					  "message": "Pong!"
					}
				  }
				}
			  }
			}
		  }
	},
    "tags": [
        {
            "description": "create read update delete product",
            "name": "Product"
        },
        {
            "description": "check server status",
            "name": "Ping"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "Backend-Shortcourse",
	Host:        "localhost:4000",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "My Shop",
	Description: "This is a My Shop API document from Backend-Shortcourse workshop",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
